# ASP.NET Core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: '/home/vsts/work/1/s/cicd-pipeline-test/cicd-pipeline-test.csproj'
    arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
    publishTestResults: true

- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
  displayName: ReportGenerator
  inputs:
    reports: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
    targetdir: '$(Build.SourcesDirectory)/CodeCoverage'
    reporttypes: 'HtmlInline_AzurePipelines_Dark;Cobertura;Badges'
    assemblyfilters: '-nunit*;-TestPlatform*'
 
# Publish the code coverage result (summary and web site)
# The summary allows to view the coverage percentage in the summary tab
# The web site allows to view which lines are covered directly in Azure Pipeline
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

# - task: PublishTestResults@2
#   inputs:
#     testResultsFormat: 'NUnit'
#     testResultsFiles: '**/TEST-*.xml'

# - task: DotNetCoreCLI@2
#   displayName: 'dotnet publish'
#   inputs:
#     command: publish
#     publishWebProjects: false
#     arguments: '--configuration Release --output $(Build.StagingDirectory)'
#     zipAfterPublish: false
#     modifyOutputPath: false

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish'
  inputs:
    command: publish
    publishWebProjects: true
    arguments: '--configuration $(BuildConfiguration) --output $(Build.StagingDirectory)'
    zipAfterPublish: true

# - task: ArchiveFiles@1
#   displayName: 'Archive publish files '
#   inputs:
#     rootFolder: '$(Build.StagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: $(Build.BuildId).zip'
  inputs:
    ArtifactName: '$(Build.BuildId).zip'

